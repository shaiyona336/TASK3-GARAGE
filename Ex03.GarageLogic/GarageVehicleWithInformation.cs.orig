using System;
using System.Collections.Generic;

namespace Ex03.GarageLogic
{
    public class GarageVehicleWithInformation
    {
        enum eCarStatus
        {
            InProgress,
            Fixed,
            Payed
        }
        private Vehicle m_Vehicle;
        private string m_NameOfOwner;
        private string m_PhoneOfOwner;
        private eCarStatus m_StatusCar;

        public string GetNameOwner()
        {
            return m_NameOfOwner;
        }
        public string GetPhoneOwner()
        {
            return m_PhoneOfOwner;
        }
        public string GetCarStatus()
        {
            string carStatus = "";

            switch (m_StatusCar)
            {
                case eCarStatus.InProgress:
                    carStatus = "INPROGRESS";
                    break;
                case eCarStatus.Fixed:
                    carStatus = "FIXED";
                    break;
                case eCarStatus.Payed:
                    carStatus = "PAYED";
                    break;
                default:
                    break;
            }

            return carStatus;
        }
        public Vehicle GetVehicle()
        {
            return m_Vehicle;
        }

        public void FillWheelsPressure()
        {
            m_Vehicle.SetAirPressureInWheelToMaximum();
        }

        public bool IsCarCorrectStatusToShow(string i_CarStatus)
        {
            bool flag = false;

            switch (i_CarStatus)
            {
                case "INPROGRESS":
                    if (m_StatusCar == eCarStatus.InProgress)
                    {
                        flag = true;
                    }
                    break;
                case "FIXED":
                    if (m_StatusCar == eCarStatus.Fixed)
                    {
                        flag = true;
                    }
                    break;
                case "PAYED":
                    if (m_StatusCar == eCarStatus.Payed)
                    {
                        flag = true;
                    }
                    break;
                case "ANY":
                    flag = true;
                    break;
                default:
<<<<<<< HEAD
                    throw new ArgumentException($"There's no car status that matches with \"{i_CarStatus}\"");
=======
                    throw new ArgumentException($"There's no car status that matches with \"{i_carStatus}\"", nameof(i_carStatus));
>>>>>>> c8b8a4f (Throwing more exceptions)
            }

            return flag;
        }

        public void SetStatusCar(string i_StatusCar)
        {
            switch (i_StatusCar)
            {
                case "INPROGRESS":
                    m_StatusCar = eCarStatus.InProgress;
                    break;
                case "FIXED":
                    m_StatusCar = eCarStatus.Fixed;
                    break;
                case "PAYED":
                    m_StatusCar = eCarStatus.Payed;
                    break;
                default:
<<<<<<< HEAD
                    throw new ArgumentException($"There's no valid status that matches with \"{i_StatusCar}\"");
=======
                    throw new ArgumentException($"There's no valid status that matches with \"{i_statusCar}\"", nameof(i_statusCar));
>>>>>>> c8b8a4f (Throwing more exceptions)
            }
        }

        public void SetVehicle(Vehicle i_Vehicle)
        {
            m_Vehicle = i_Vehicle;
        }

        public void SetNameOfOwner(string i_NameOfOwner)
        {
            m_NameOfOwner = i_NameOfOwner;
        }

        public void SetPhoneOfOwner(string i_PhoneOfOwner)
        {
            m_PhoneOfOwner = i_PhoneOfOwner;
        }

        public void SetCarStatusInProgress()
        {
            m_StatusCar = eCarStatus.InProgress;
        }
    }
}
